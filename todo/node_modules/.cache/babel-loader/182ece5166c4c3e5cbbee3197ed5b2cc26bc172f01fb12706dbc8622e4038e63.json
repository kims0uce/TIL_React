{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoyeon/TIL/React/todo/src/components/List.js\";\n// extension : ES7+ : rfc 치면 와꾸 만들어준다. \n// 컴포넌트를 나눌 때는 정답이 없다. 재사용성이 높도록 나눠준다. \nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function List(_ref) {\n  let {\n    todoData,\n    setTodoData\n  } = _ref;\n  // X버튼에 css 적용해준다. \n  const btnStyle = {\n    color: \"#fff\",\n    border: \"none\",\n    padding: \"5px 9px\",\n    borderRadius: \"50%\",\n    cursor: \"pointer\",\n    float: \"right\"\n  };\n\n  // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n  // 함수로 만든다. \n  const getStyle = completed => {\n    return {\n      padding: \"10px\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: completed ? \"line-through\" : \"none\"\n    };\n  };\n\n  // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n  const handleClick = id => {\n    let newTodoData = todoData.filter(data => data.id !== id);\n    console.log('newTodoData', newTodoData);\n    // todoData를 newTodoData로 대치한다. \n    // this.setState({todoData : newTodoData})\n    setTodoData(newTodoData);\n  };\n\n  // 완료한 할 일 가로선 긋기 \n  const handelCompleteChange = id => {\n    let newTodoData = todoData.map(data => {\n      if (data.id === id) {\n        data.completed = !data.completed;\n      }\n      return data;\n    });\n\n    // this.setState({todoData: newTodoData});\n    setTodoData(newTodoData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: todoData.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: getStyle(data.completed),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: false,\n        onChange: () => handelCompleteChange(data.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), data.title, /*#__PURE__*/_jsxDEV(\"button\", {\n        style: btnStyle,\n        onClick: () => handleClick(data.id),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, data.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c = List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","List","_ref","todoData","setTodoData","btnStyle","color","border","padding","borderRadius","cursor","float","getStyle","completed","borderBottom","textDecoration","handleClick","id","newTodoData","filter","data","console","log","handelCompleteChange","map","children","style","type","defaultChecked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","_c","$RefreshReg$"],"sources":["/Users/kimsoyeon/TIL/React/todo/src/components/List.js"],"sourcesContent":["// extension : ES7+ : rfc 치면 와꾸 만들어준다. \n// 컴포넌트를 나눌 때는 정답이 없다. 재사용성이 높도록 나눠준다. \nimport React from 'react'\n\nexport default function List({ todoData, setTodoData}) {\n  // X버튼에 css 적용해준다. \n  const btnStyle = {\n    color : \"#fff\",\n    border: \"none\",\n    padding: \"5px 9px\",\n    borderRadius:\"50%\",\n    cursor: \"pointer\",\n    float: \"right\"\n  };\n\n    // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n  // 함수로 만든다. \n  const getStyle = (completed) => {\n    return {\n      padding: \"10px\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: completed ? \"line-through\" : \"none\",\n    };\n  };\n\n\n  // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n  const handleClick = (id) => {\n    let newTodoData = todoData.filter(data => data.id !== id)\n    console.log('newTodoData', newTodoData);\n    // todoData를 newTodoData로 대치한다. \n    // this.setState({todoData : newTodoData})\n    setTodoData(newTodoData);\n  };\n  \n    // 완료한 할 일 가로선 긋기 \n    const handelCompleteChange = (id) => {\n        let newTodoData = todoData.map(data => {\n          if (data.id === id) {\n            data.completed = !data.completed;\n          }\n          return data;\n    })\n\n    // this.setState({todoData: newTodoData});\n    setTodoData(newTodoData)\n  }\n\n\n  return (\n    <div>\n        {todoData.map( (data) => (\n        <div style={getStyle(data.completed)} key={data.id}>\n        <input type=\"checkbox\" defaultChecked={false} onChange={() => handelCompleteChange(data.id)}/>\n        {data.title}\n        <button style={btnStyle} onClick={() => handleClick(data.id)}>X</button>\n    </div>\n    ))}\n    </div>\n  );\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,IAAIA,CAAAC,IAAA,EAA2B;EAAA,IAA1B;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAF,IAAA;EACnD;EACA,MAAMG,QAAQ,GAAG;IACfC,KAAK,EAAG,MAAM;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE,SAAS;IAClBC,YAAY,EAAC,KAAK;IAClBC,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE;EACT,CAAC;;EAEC;EACF;EACA,MAAMC,QAAQ,GAAIC,SAAS,IAAK;IAC9B,OAAO;MACLL,OAAO,EAAE,MAAM;MACfM,YAAY,EAAE,iBAAiB;MAC/BC,cAAc,EAAEF,SAAS,GAAG,cAAc,GAAG;IAC/C,CAAC;EACH,CAAC;;EAGD;EACA,MAAMG,WAAW,GAAIC,EAAE,IAAK;IAC1B,IAAIC,WAAW,GAAGf,QAAQ,CAACgB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;IACzDI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,WAAW,CAAC;IACvC;IACA;IACAd,WAAW,CAACc,WAAW,CAAC;EAC1B,CAAC;;EAEC;EACA,MAAMK,oBAAoB,GAAIN,EAAE,IAAK;IACjC,IAAIC,WAAW,GAAGf,QAAQ,CAACqB,GAAG,CAACJ,IAAI,IAAI;MACrC,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,EAAE;QAClBG,IAAI,CAACP,SAAS,GAAG,CAACO,IAAI,CAACP,SAAS;MAClC;MACA,OAAOO,IAAI;IACjB,CAAC,CAAC;;IAEF;IACAhB,WAAW,CAACc,WAAW,CAAC;EAC1B,CAAC;EAGD,oBACElB,OAAA;IAAAyB,QAAA,EACKtB,QAAQ,CAACqB,GAAG,CAAGJ,IAAI,iBACpBpB,OAAA;MAAK0B,KAAK,EAAEd,QAAQ,CAACQ,IAAI,CAACP,SAAS,CAAE;MAAAY,QAAA,gBACrCzB,OAAA;QAAO2B,IAAI,EAAC,UAAU;QAACC,cAAc,EAAE,KAAM;QAACC,QAAQ,EAAEA,CAAA,KAAMN,oBAAoB,CAACH,IAAI,CAACH,EAAE;MAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,EAC7Fb,IAAI,CAACc,KAAK,eACXlC,OAAA;QAAQ0B,KAAK,EAAErB,QAAS;QAAC8B,OAAO,EAAEA,CAAA,KAAMnB,WAAW,CAACI,IAAI,CAACH,EAAE,CAAE;QAAAQ,QAAA,EAAC;MAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA,GAH7Bb,IAAI,CAACH,EAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAKrD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEV;AAACG,EAAA,GAxDuBnC,IAAI;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}