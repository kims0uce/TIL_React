{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoyeon/TIL/React/todo/src/App.js\";\n// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\nimport React, { Component } from \"react\";\n// App.css 적용\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    // X버튼에 css 적용해준다. \n    this.btnStyle = {\n      color: \"#fff\",\n      border: \"none\",\n      padding: \"5px 9px\",\n      borderRadius: \"50%\",\n      cursor: \"pointer\",\n      float: \"right\"\n    };\n    // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n    // 함수로 만든다. \n    this.getStyle = () => {\n      return {\n        padding: \"10px\",\n        borderBottom: \"1px #ccc dotted\",\n        textDecoration: \"line-through\"\n      };\n    };\n    // 할일 데이타를 배열에 담는다. \n    // value는 값을 보관해준다. \n    this.state = {\n      todoData: [{\n        id: \"1\",\n        title: \"공부하기\",\n        completed: true\n      }, {\n        id: \"2\",\n        title: \"청소하기\",\n        completed: false\n      }],\n      // value의 처음 state는 빈값을 준다. \n      value: \"\"\n    };\n    // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n    this.handleClick = id => {\n      let newTodoData = this.state.todoData.filter(data => data.id !== id);\n      console.log('newTodoData', newTodoData);\n      // todoData를 newTodoData로 대치한다. \n      this.setState({\n        todoData: newTodoData\n      });\n    };\n    this.handleChange = e => {\n      console.log(e.target.value);\n      this.setState({\n        value: e.target.value\n      });\n    };\n    this.handleSubmit = e => {\n      // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다. \n      e.preventDefault();\n\n      // 새로운 할일 데이터 \n      let newTodo = {\n        id: Date.now(),\n        title: this.state.value,\n        completed: false\n      };\n\n      // 원래 있던 할 일에 새로운 할 일 더해주기 \n      // setState : state를 바꿀 때 사용한다. \n      /* ... : 전개연산자\n      */\n      this.setState({\n        todoData: [...this.state.todoData, newTodo]\n      });\n    };\n  }\n  // render 메소드 안에서 ui를 작성한다. \n  // 함수향 컴포넌트를 사용시에는 render 메소드가 필요없다. \n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todoBlock\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), this.state.todoData.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: this.getStyle(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            defaultChecked: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), data.title, /*#__PURE__*/_jsxDEV(\"button\", {\n            style: this.btnStyle,\n            onClick: () => this.handleClick(data.id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, data.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"form\", {\n          style: {\n            display: 'flex'\n          },\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"value\",\n            style: {\n              flex: '10',\n              padding: '5px'\n            },\n            placeholder: \"\\uD574\\uC57C \\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n            value: this.state.value,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"\\uC785\\uB825\",\n            className: \"btn\",\n            style: {\n              flex: '1'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","App","constructor","arguments","btnStyle","color","border","padding","borderRadius","cursor","float","getStyle","borderBottom","textDecoration","state","todoData","id","title","completed","value","handleClick","newTodoData","filter","data","console","log","setState","handleChange","e","target","handleSubmit","preventDefault","newTodo","Date","now","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","type","defaultChecked","onClick","display","onSubmit","name","flex","placeholder","onChange"],"sources":["/Users/kimsoyeon/TIL/React/todo/src/App.js"],"sourcesContent":["// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\nimport React, {Component} from \"react\";\n// App.css 적용\nimport \"./App.css\";\n\nexport default class App extends Component {\n  // X버튼에 css 적용해준다. \n  btnStyle = {\n    color : \"#fff\",\n    border: \"none\",\n    padding: \"5px 9px\",\n    borderRadius:\"50%\",\n    cursor: \"pointer\",\n    float: \"right\"\n  }\n\n  // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n  // 함수로 만든다. \n  getStyle = () => {\n    return {\n      padding: \"10px\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: \"line-through\",\n    };\n  };\n  \n  // 할일 데이타를 배열에 담는다. \n  // value는 값을 보관해준다. \n  state = {\n    todoData : [\n      {\n        id: \"1\",\n        title: \"공부하기\",\n        completed: true\n      }, \n      {\n        id: \"2\",\n        title: \"청소하기\",\n        completed: false\n      }\n    ],\n    // value의 처음 state는 빈값을 준다. \n    value: \"\",\n  }\n \n\n  // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n  handleClick = (id) => {\n    let newTodoData = this.state.todoData.filter(data => data.id !== id)\n    console.log('newTodoData', newTodoData);\n    // todoData를 newTodoData로 대치한다. \n    this.setState({todoData : newTodoData})\n  };\n  \n  handleChange = (e) => {\n    console.log(e.target.value);\n    this.setState({value : e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다. \n    e.preventDefault();\n\n    // 새로운 할일 데이터 \n    let newTodo = {\n      id: Date.now(),\n      title: this.state.value,\n      completed: false,\n    };\n\n    // 원래 있던 할 일에 새로운 할 일 더해주기 \n    // setState : state를 바꿀 때 사용한다. \n    /* ... : 전개연산자\n    */\n    this.setState({todoData: [...this.state.todoData, newTodo]})\n  }\n  // render 메소드 안에서 ui를 작성한다. \n  // 함수향 컴포넌트를 사용시에는 render 메소드가 필요없다. \n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */  \n  render() {\n    return(\n      <div className=\"container\">\n        <div className=\"todoBlock\">\n          <div className=\"title\">\n            <h1>할 일 목록</h1>\n          </div>\n  \n          {this.state.todoData.map( (data) => (\n              <div style={this.getStyle()} key={data.id}>\n              <input type=\"checkbox\" defaultChecked={false} />\n               {data.title}\n              <button style={this.btnStyle} onClick={() => this.handleClick(data.id)}>X</button>\n            </div>\n          ))}\n\n          <form style={{display: 'flex'}} onSubmit={this.handleSubmit}> \n            <input \n              type=\"text\" \n              name=\"value\" \n              style={{flex: '10', padding: '5px'}}\n              placeholder=\"해야 할 일을 입력하세요.\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n\n            <input \n              type=\"submit\"\n              value=\"입력\"\n              className=\"btn\"\n              style={{flex: '1'}}/>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}