{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoyeon/TIL/React/todo/src/App.js\",\n  _s = $RefreshSig$();\n// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\n// import React, {Component} from \"react\";\nimport React, { useState } from \"react\";\n// App.css 적용\nimport \"./App.css\";\nimport List from \"./components/List\";\n\n// export default class App extends Component {\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // 할일 데이타를 배열에 담는다. \n  // value는 값을 보관해준다. \n  // state = {\n  //   todoData : [],\n  //   // value의 처음 state는 빈값을 준다. \n  //   value: \"\",\n  // }\n\n  // const [ 변수이름, state를 정하는 함수]\n  const [todoData, setTodoData] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  // X버튼에 css 적용해준다. \n  // const btnStyle = {\n  //   color : \"#fff\",\n  //   border: \"none\",\n  //   padding: \"5px 9px\",\n  //   borderRadius:\"50%\",\n  //   cursor: \"pointer\",\n  //   float: \"right\"\n  // };\n\n  // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n  // 함수로 만든다. \n  const getStyle = completed => {\n    return {\n      padding: \"10px\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: completed ? \"line-through\" : \"none\"\n    };\n  };\n\n  // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n  const handleClick = id => {\n    let newTodoData = todoData.filter(data => data.id !== id);\n    console.log('newTodoData', newTodoData);\n    // todoData를 newTodoData로 대치한다. \n    // this.setState({todoData : newTodoData})\n    setTodoData(newTodoData);\n  };\n  const handleChange = e => {\n    console.log(e.target.value);\n    // this.setState({value : e.target.value})\n    setValue(e.target.value);\n  };\n  const handleSubmit = e => {\n    // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다. \n    e.preventDefault();\n\n    // 새로운 할일 데이터 \n    let newTodo = {\n      id: Date.now(),\n      title: value,\n      completed: false\n    };\n\n    // 원래 있던 할 일에 새로운 할 일 더해주기 \n    // setState : state를 바꿀 때 사용한다. \n    // ... : 전개연산자\n    // this.setState({todoData: [...todoData, newTodo], value: \"\"})\n\n    // setter에서 이전 state를 가지고 오기 위해서는 인수에 함수를 사용할 수 있다. \n    setTodoData(prev => [...prev, newTodo]);\n    setValue(\"\");\n  };\n\n  // 완료한 할 일 가로선 긋기 \n  const handelCompleteChange = id => {\n    let newTodoData = todoData.map(data => {\n      if (data.id === id) {\n        data.completed = !data.completed;\n      }\n      return data;\n    });\n\n    // this.setState({todoData: newTodoData});\n    setTodoData(newTodoData);\n  };\n\n  // render 메소드 안에서 ui를 작성한다. \n  // 함수형 컴포넌트를 사용시에는 render 메소드가 필요없다. \n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */\n  // 태그 안에 사용한 {}는 자바스크립트를 실행시킨다 .\n  // 함수형 컴포넌트 안에서는 render()가 필요없다. \n  // render() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todoBlock\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        todoData: todoData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        style: {\n          display: 'flex'\n        },\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"value\",\n          style: {\n            flex: '10',\n            padding: '5px'\n          },\n          placeholder: \"\\uD574\\uC57C \\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n          value: value,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"\\uC785\\uB825\",\n          className: \"btn\",\n          style: {\n            flex: '1'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n  // }\n}\n_s(App, \"S/Q++R/j89nkx2lbP/4ikFAxyyg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","List","jsxDEV","_jsxDEV","App","_s","todoData","setTodoData","value","setValue","getStyle","completed","padding","borderBottom","textDecoration","handleClick","id","newTodoData","filter","data","console","log","handleChange","e","target","handleSubmit","preventDefault","newTodo","Date","now","title","prev","handelCompleteChange","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onSubmit","type","name","flex","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/kimsoyeon/TIL/React/todo/src/App.js"],"sourcesContent":["// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\n// import React, {Component} from \"react\";\nimport React, {useState} from \"react\";\n// App.css 적용\nimport \"./App.css\";\nimport List from \"./components/List\";\n\n// export default class App extends Component {\nexport default function App () {\n  // 할일 데이타를 배열에 담는다. \n  // value는 값을 보관해준다. \n  // state = {\n  //   todoData : [],\n  //   // value의 처음 state는 빈값을 준다. \n  //   value: \"\",\n  // }\n\n  // const [ 변수이름, state를 정하는 함수]\n  const [todoData, setTodoData] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n\n    // X버튼에 css 적용해준다. \n    // const btnStyle = {\n    //   color : \"#fff\",\n    //   border: \"none\",\n    //   padding: \"5px 9px\",\n    //   borderRadius:\"50%\",\n    //   cursor: \"pointer\",\n    //   float: \"right\"\n    // };\n\n  // 요소가 추가될 때 마다 구분선을 추가해주기 위해 \n  // 함수로 만든다. \n  const getStyle = (completed) => {\n    return {\n      padding: \"10px\",\n      borderBottom: \"1px #ccc dotted\",\n      textDecoration: completed ? \"line-through\" : \"none\",\n    };\n  };\n\n\n  // this.filter() 메소드를 사용하여 할일 목록을 지운다. \n  const handleClick = (id) => {\n    let newTodoData = todoData.filter(data => data.id !== id)\n    console.log('newTodoData', newTodoData);\n    // todoData를 newTodoData로 대치한다. \n    // this.setState({todoData : newTodoData})\n    setTodoData(newTodoData);\n  };\n  \n  const handleChange = (e) => {\n    console.log(e.target.value);\n    // this.setState({value : e.target.value})\n    setValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다. \n    e.preventDefault();\n\n    // 새로운 할일 데이터 \n    let newTodo = {\n      id: Date.now(),\n      title: value,\n      completed: false,\n    };\n\n    // 원래 있던 할 일에 새로운 할 일 더해주기 \n    // setState : state를 바꿀 때 사용한다. \n    // ... : 전개연산자\n    // this.setState({todoData: [...todoData, newTodo], value: \"\"})\n    \n    // setter에서 이전 state를 가지고 오기 위해서는 인수에 함수를 사용할 수 있다. \n    setTodoData(prev => \n      [...prev, newTodo]\n    )\n    setValue(\"\")\n  }\n\n  // 완료한 할 일 가로선 긋기 \n  const handelCompleteChange = (id) => {\n    let newTodoData = todoData.map(data => {\n      if (data.id === id) {\n        data.completed = !data.completed;\n      }\n      return data;\n    })\n\n    // this.setState({todoData: newTodoData});\n    setTodoData(newTodoData)\n  }\n\n\n  // render 메소드 안에서 ui를 작성한다. \n  // 함수형 컴포넌트를 사용시에는 render 메소드가 필요없다. \n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */  \n // 태그 안에 사용한 {}는 자바스크립트를 실행시킨다 .\n // 함수형 컴포넌트 안에서는 render()가 필요없다. \n  // render() {\n    return(\n      <div className=\"container\">\n        <div className=\"todoBlock\">\n          <div className=\"title\">\n            <h1>할 일 목록</h1>\n          </div>\n  \n          <List todoData={todoData}/>\n          {/* {todoData.map( (data) => (\n              <div style={getStyle(data.completed)} key={data.id}>\n              <input type=\"checkbox\" defaultChecked={false} onChange={() => handelCompleteChange(data.id)}/>\n               {data.title}\n              <button style={btnStyle} onClick={() => handleClick(data.id)}>X</button>\n            </div>\n          ))} */}\n\n          <form style={{display: 'flex'}} onSubmit={handleSubmit}> \n            <input \n              type=\"text\" \n              name=\"value\" \n              style={{flex: '10', padding: '5px'}}\n              placeholder=\"해야 할 일을 입력하세요.\"\n              value={value}\n              onChange={handleChange}\n            />\n\n            <input \n              type=\"submit\"\n              value=\"입력\"\n              className=\"btn\"\n              style={{flex: '1'}}/>\n          </form>\n        </div>\n      </div>\n    )\n  // }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}