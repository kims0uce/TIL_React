{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoyeon/TIL/React/todo/src/App.js\",\n  _s = $RefreshSig$();\n// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\nimport React, { useState } from \"react\";\n// App.css 적용\nimport \"./App.css\";\n// List라는 자녀 컴포넌트를 만듦\nimport List from \"./components/List\";\nimport Form from \"./components/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // const [ 변수이름, state를 정하는 함수]\n  const [todoData, setTodoData] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  // handleSubmit은 todoData와 value 모두 다루고 있기 때문에\n  // App.js 컴포넌트 안에서 처리하는 것이 좋다.\n  const handleSubmit = e => {\n    // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다.\n    e.preventDefault();\n\n    // 새로운 할일 데이터\n    let newTodo = {\n      id: Date.now(),\n      title: value,\n      completed: false\n    };\n\n    // 원래 있던 할 일에 새로운 할 일 더해주기\n    // setState : state를 바꿀 때 사용한다.\n    // ... : 전개연산자\n    // this.setState({todoData: [...todoData, newTodo], value: \"\"})\n\n    // setter에서 이전 state를 가지고 오기 위해서는 인수에 함수를 사용할 수 있다.\n    setTodoData(prev => [...prev, newTodo]);\n    setValue(\"\");\n  };\n\n  // render 메소드 안에서 ui를 작성한다.\n  // 함수형 컴포넌트를 사용시에는 render 메소드가 필요없다.\n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */\n  // 태그 안에 사용한 {}는 자바스크립트를 실행시킨다 .\n  // 함수형 컴포넌트 안에서는 render()가 필요없다.\n  // render() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center w-screen h-screen bg-blue-100\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full p-5 m-4 bg-white rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uD560 \\uC77C \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        todoData: todoData,\n        setTodoData: setTodoData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        handleSubmit: handleSubmit,\n        value: value,\n        setValue: setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n  // }\n}\n_s(App, \"S/Q++R/j89nkx2lbP/4ikFAxyyg=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","List","Form","jsxDEV","_jsxDEV","App","_s","todoData","setTodoData","value","setValue","handleSubmit","e","preventDefault","newTodo","id","Date","now","title","completed","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kimsoyeon/TIL/React/todo/src/App.js"],"sourcesContent":["// react 라이브러리에서 -> 어떠한 기능을 작성하는데 도움\n// React 와 Component 클래스를 가져온다.\nimport React, { useState } from \"react\";\n// App.css 적용\nimport \"./App.css\";\n// List라는 자녀 컴포넌트를 만듦\nimport List from \"./components/List\";\nimport Form from \"./components/Form\";\n\nexport default function App() {\n  // const [ 변수이름, state를 정하는 함수]\n  const [todoData, setTodoData] = useState([]);\n  const [value, setValue] = useState(\"\");\n\n  // handleSubmit은 todoData와 value 모두 다루고 있기 때문에\n  // App.js 컴포넌트 안에서 처리하는 것이 좋다.\n  const handleSubmit = (e) => {\n    // 새로운 value가 들어왔을 때 페이지가 reload 되는 것을 막아준다.\n    e.preventDefault();\n\n    // 새로운 할일 데이터\n    let newTodo = {\n      id: Date.now(),\n      title: value,\n      completed: false,\n    };\n\n    // 원래 있던 할 일에 새로운 할 일 더해주기\n    // setState : state를 바꿀 때 사용한다.\n    // ... : 전개연산자\n    // this.setState({todoData: [...todoData, newTodo], value: \"\"})\n\n    // setter에서 이전 state를 가지고 오기 위해서는 인수에 함수를 사용할 수 있다.\n    setTodoData((prev) => [...prev, newTodo]);\n    setValue(\"\");\n  };\n\n  // render 메소드 안에서 ui를 작성한다.\n  // 함수형 컴포넌트를 사용시에는 render 메소드가 필요없다.\n  // this.{배열명}.map() : map 메서드를 통해 데이터 나열\n  /* JSX key속성\n    -> 리액트에서 요소의 리스트를 나열할 때는 key를 넣어주어야 한다. \n    -> 키는 리액트가 변경, 추가 또는 제거된 항목을 식별하는데 도움이 된다. \n    -> 요소에 안정적인 ID를 부여하려면 배열 내부의 요소에 키를 제공해야 한다.  \n    -> diffing 시, key를 이용해서 어떠한 부분이 바뀌었는지 인식할 수 있다. \n    key에는 유니크한 값을 넣어주고, key가 없다면 index를 키로 사용한다. \n    index를 사용하는 방법은 권장되지 않는데, 그 이유는 원소의 순서가 바뀔 때 마다 키값이 변하기 때문이다. \n  */\n  // 태그 안에 사용한 {}는 자바스크립트를 실행시킨다 .\n  // 함수형 컴포넌트 안에서는 render()가 필요없다.\n  // render() {\n  return (\n    <div className=\"flex items-center justify-center w-screen h-screen bg-blue-100\">\n      <div className=\"w-full p-5 m-4 bg-white rounded shadow\">\n        <div>\n          <h1>할 일 목록</h1>\n        </div>\n        <List todoData={todoData} setTodoData={setTodoData} />\n        <Form handleSubmit={handleSubmit} value={value} setValue={setValue} />\n      </div>\n    </div>\n  );\n  // }\n}\n"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,OAAO,WAAW;AAClB;AACA,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,IAAI,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA,MAAMW,YAAY,GAAIC,CAAC,IAAK;IAC1B;IACAA,CAAC,CAACC,cAAc,EAAE;;IAElB;IACA,IAAIC,OAAO,GAAG;MACZC,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;MACdC,KAAK,EAAET,KAAK;MACZU,SAAS,EAAE;IACb,CAAC;;IAED;IACA;IACA;IACA;;IAEA;IACAX,WAAW,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,OAAO,CAAC,CAAC;IACzCJ,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;;EAED;EACA;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;EACA,oBACEN,OAAA;IAAKiB,SAAS,EAAC,gEAAgE;IAAAC,QAAA,eAC7ElB,OAAA;MAAKiB,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACrDlB,OAAA;QAAAkB,QAAA,eACElB,OAAA;UAAAkB,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAK;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACX,eACNtB,OAAA,CAACH,IAAI;QAACM,QAAQ,EAAEA,QAAS;QAACC,WAAW,EAAEA;MAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACtDtB,OAAA,CAACF,IAAI;QAACS,YAAY,EAAEA,YAAa;QAACF,KAAK,EAAEA,KAAM;QAACC,QAAQ,EAAEA;MAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;EAER;AACF;AAACpB,EAAA,CAtDuBD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}