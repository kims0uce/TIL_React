{"ast":null,"code":"var _jsxFileName = \"/Users/kimsoyeon/TIL/React/todo/src/components/Lists.js\";\n// extension : ES7+ : rfc 치면 와꾸 만들어준다.\n// 컴포넌트를 나눌 때는 정답이 없다. 재사용성이 높도록 나눠준다.\nimport React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Lists(_ref) {\n  let {\n    todoData,\n    setTodoData\n  } = _ref;\n  const handleEnd = result => {\n    // 목적지가 없으면 그대로 리턴한다.\n    if (!result.destination) return;\n\n    // 목적지가 있다면 순서를 변경하고 화면에 출력한다.\n    const newTodoData = todoData;\n\n    // splice() : 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경한다.\n    // 1. 변경되는 아이템을 배열에서 지운다.\n    // 2. 리턴값으로 지워진 아이템을 reorderedItem에 저장한다.\n    const [reorderedItem] = newTodoData.splice(result.source.index, 1);\n\n    // 원하는 위치에 reorderedItem을 배치한다.\n    newTodoData.splice(result.destination.index, 0, reorderedItem);\n    setTodoData(newTodoData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"todo\",\n        children: provided =>\n        /*#__PURE__*/\n        // Droppable에서 div로 정보를 전달한다\n        _jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [todoData.map((data, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: data.id.toString(),\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(List, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 44\n            }, this)\n          }, data.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = Lists;\nvar _c;\n$RefreshReg$(_c, \"Lists\");","map":{"version":3,"names":["React","DragDropContext","Draggable","Droppable","jsxDEV","_jsxDEV","Lists","_ref","todoData","setTodoData","handleEnd","result","destination","newTodoData","reorderedItem","splice","source","index","children","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","data","draggableId","id","toString","snapshot","List","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","$RefreshReg$"],"sources":["/Users/kimsoyeon/TIL/React/todo/src/components/Lists.js"],"sourcesContent":["// extension : ES7+ : rfc 치면 와꾸 만들어준다.\n// 컴포넌트를 나눌 때는 정답이 없다. 재사용성이 높도록 나눠준다.\nimport React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nexport default function Lists({ todoData, setTodoData }) {\n  const handleEnd = (result) => {\n    // 목적지가 없으면 그대로 리턴한다.\n    if (!result.destination) return;\n\n    // 목적지가 있다면 순서를 변경하고 화면에 출력한다.\n    const newTodoData = todoData;\n\n    // splice() : 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경한다.\n    // 1. 변경되는 아이템을 배열에서 지운다.\n    // 2. 리턴값으로 지워진 아이템을 reorderedItem에 저장한다.\n    const [reorderedItem] = newTodoData.splice(result.source.index, 1);\n\n    // 원하는 위치에 reorderedItem을 배치한다.\n    newTodoData.splice(result.destination.index, 0, reorderedItem);\n    setTodoData(newTodoData);\n  };\n\n  return (\n    <div>\n      <DragDropContext onDragEnd={handleEnd}>\n        <Droppable droppableId=\"todo\">\n          {(provided) => (\n            // Droppable에서 div로 정보를 전달한다\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              {todoData.map((data, index) => (\n                <Draggable\n                  key={data.id}\n                  draggableId={data.id.toString()}\n                  index={index}\n                >\n                  {(provided, snapshot) => <List />}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,eAAe,SAASC,KAAKA,CAAAC,IAAA,EAA4B;EAAA,IAA3B;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAAF,IAAA;EACrD,MAAMG,SAAS,GAAIC,MAAM,IAAK;IAC5B;IACA,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;;IAEzB;IACA,MAAMC,WAAW,GAAGL,QAAQ;;IAE5B;IACA;IACA;IACA,MAAM,CAACM,aAAa,CAAC,GAAGD,WAAW,CAACE,MAAM,CAACJ,MAAM,CAACK,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC;;IAElE;IACAJ,WAAW,CAACE,MAAM,CAACJ,MAAM,CAACC,WAAW,CAACK,KAAK,EAAE,CAAC,EAAEH,aAAa,CAAC;IAC9DL,WAAW,CAACI,WAAW,CAAC;EAC1B,CAAC;EAED,oBACER,OAAA;IAAAa,QAAA,eACEb,OAAA,CAACJ,eAAe;MAACkB,SAAS,EAAET,SAAU;MAAAQ,QAAA,eACpCb,OAAA,CAACF,SAAS;QAACiB,WAAW,EAAC,MAAM;QAAAF,QAAA,EACzBG,QAAQ;QAAA;QACR;QACAhB,OAAA;UAAA,GAASgB,QAAQ,CAACC,cAAc;UAAEC,GAAG,EAAEF,QAAQ,CAACG,QAAS;UAAAN,QAAA,GACtDV,QAAQ,CAACiB,GAAG,CAAC,CAACC,IAAI,EAAET,KAAK,kBACxBZ,OAAA,CAACH,SAAS;YAERyB,WAAW,EAAED,IAAI,CAACE,EAAE,CAACC,QAAQ,EAAG;YAChCZ,KAAK,EAAEA,KAAM;YAAAC,QAAA,EAEZA,CAACG,QAAQ,EAAES,QAAQ,kBAAKzB,OAAA,CAAC0B,IAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAG,GAJ5BT,IAAI,CAACE,EAAE;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAMf,CAAC,EACDd,QAAQ,CAACe,WAAW;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAExB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACI;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACd;AAEV;AAACE,EAAA,GAzCuB/B,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}